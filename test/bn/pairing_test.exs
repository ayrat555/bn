defmodule BN.PairingTest do
  use ExUnit.Case, async: true

  alias BN.{Pairing, FQ2, BN128Arithmetic, FQ, FQ12}

  describe "twist/1" do
    test "twists fq2 point to fq12" do
      x =
        FQ2.new([
          10_857_046_999_023_057_135_944_570_762_232_829_481_370_756_359_578_518_086_990_519_993_285_655_852_781,
          11_559_732_032_986_387_107_991_004_021_392_285_783_925_812_861_821_192_530_917_403_151_452_391_805_634
        ])

      y =
        FQ2.new([
          8_495_653_923_123_431_417_604_973_247_489_272_438_418_190_587_263_600_148_770_280_649_306_958_101_930,
          4_082_367_875_863_433_681_332_203_403_145_435_568_316_851_327_593_401_208_105_741_076_214_120_093_531
        ])

      {result_x, result_y} = twisted = Pairing.twist({x, y})
      assert BN128Arithmetic.on_curve?(twisted)

      expected_x_coordinates = [
        0,
        0,
        16_260_673_061_341_949_275_257_563_295_988_632_869_519_996_389_676_903_622_179_081_103_440_260_644_990,
        0,
        0,
        0,
        0,
        0,
        11_559_732_032_986_387_107_991_004_021_392_285_783_925_812_861_821_192_530_917_403_151_452_391_805_634,
        0,
        0,
        0
      ]

      expected_y_coordinates = [
        0,
        0,
        0,
        15_530_828_784_031_078_730_107_954_109_694_902_500_959_150_953_518_636_601_196_686_752_670_329_677_317,
        0,
        0,
        0,
        0,
        0,
        4_082_367_875_863_433_681_332_203_403_145_435_568_316_851_327_593_401_208_105_741_076_214_120_093_531,
        0,
        0
      ]

      result_x.coef
      |> Enum.zip(expected_x_coordinates)
      |> Enum.each(fn {result, expected} ->
        assert result.value == expected
      end)

      result_y.coef
      |> Enum.zip(expected_y_coordinates)
      |> Enum.each(fn {result, expected} ->
        assert result.value == expected
      end)
    end
  end

  describe "point_to_fq12/1" do
    test "converts fq point to fq12" do
      x = FQ.new(1)
      y = FQ.new(2)

      point = {x, y}

      {result_x, result_y} = Pairing.point_to_fq12(point)

      expected_x = [x.value] ++ List.duplicate(0, 11)
      expected_y = [y.value] ++ List.duplicate(0, 11)

      result_y.coef
      |> Enum.zip(expected_y)
      |> Enum.each(fn {result, expected} ->
        assert result.value == expected
      end)

      result_x.coef
      |> Enum.zip(expected_x)
      |> Enum.each(fn {result, expected} ->
        assert result.value == expected
      end)
    end
  end

  describe "linefunc/3" do
    test "calculates linefunc when x1 != x2" do
      p1 = FQ12.new([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
      p2 = FQ12.new([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])
      p3 = FQ12.new([13, 11, 14, 9, 15, 7, 16, 5, 17, 3, 18, 1])

      result = Pairing.linefunc({p1, p2}, {p2, p1}, {p1, p3})

      expected_coef = [
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_582,
        0,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_579,
        0,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_576,
        0,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_573,
        0,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_570,
        0,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_567,
        0
      ]

      result.coef
      |> Enum.zip(expected_coef)
      |> Enum.each(fn {coef, expected_coef} ->
        assert coef.value == expected_coef
      end)
    end

    test "calculates linefunc y1 == y2 and x1 == x2" do
      p1 = FQ12.new([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
      p2 = FQ12.new([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])
      p3 = FQ12.new([13, 11, 14, 9, 15, 7, 16, 5, 17, 3, 18, 1])

      result = Pairing.linefunc({p1, p2}, {p1, p2}, {p3, p1})

      expected_coef = [
        10_439_819_245_746_058_310_313_139_969_226_061_548_970_476_147_158_647_771_098_738_126_702_333_288_275,
        20_209_404_315_088_719_024_841_530_023_757_577_221_442_916_246_032_402_603_258_361_507_763_482_253_162,
        12_346_372_785_895_294_661_265_089_133_498_259_359_206_211_902_853_270_591_222_555_012_989_783_273_409,
        2_225_949_448_694_393_910_323_213_160_885_342_166_609_117_239_857_361_263_817_155_735_873_184_227_290,
        1_008_067_730_844_933_359_113_054_255_808_931_466_124_300_546_394_395_826_984_240_453_108_152_353_012,
        1_516_942_216_910_094_500_825_677_140_438_427_902_429_013_157_462_733_458_399_541_855_718_650_079_595,
        6_647_565_859_822_248_904_845_691_622_828_760_372_493_963_343_068_101_090_943_212_059_771_518_732_195,
        14_348_296_554_621_135_026_490_916_084_855_868_703_774_715_276_346_835_440_457_034_247_597_470_726_033,
        4_131_988_055_083_387_420_506_270_590_737_430_569_941_191_239_276_969_689_261_337_862_956_652_002_638,
        12_981_559_915_505_427_312_266_664_825_518_739_490_323_518_080_894_450_175_819_535_981_262_227_909_672,
        21_620_666_551_060_808_402_579_464_748_019_593_623_087_397_264_480_253_713_385_718_524_557_823_081_709,
        14_538_267_961_174_646_047_764_412_186_200_994_980_531_811_546_992_611_290_073_169_580_161_654_554_253
      ]

      result.coef
      |> Enum.zip(expected_coef)
      |> Enum.each(fn {coef, expected_coef} ->
        assert coef.value == expected_coef
      end)
    end

    test "calculates linefunc when x1 == x2 and y1 != y2" do
      p1 = FQ12.new([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
      p2 = FQ12.new([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])
      p3 = FQ12.new([13, 11, 14, 9, 15, 7, 16, 5, 17, 3, 18, 1])

      result = Pairing.linefunc({p1, p2}, {p1, p3}, {p2, p3})

      expected_coef = [
        11,
        9,
        7,
        5,
        3,
        1,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_582,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_580,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_578,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_576,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_574,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_208_572
      ]

      result.coef
      |> Enum.zip(expected_coef)
      |> Enum.each(fn {coef, expected_coef} ->
        assert coef.value == expected_coef
      end)
    end
  end
end
