defmodule BN.FQ12Test do
  use ExUnit.Case, async: true

  alias BN.{FQ12, FQ}

  describe "new/1" do
    test "creates new fq12" do
      coef = [99, 121, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20]
      fq12 = FQ12.new(coef)

      assert fq12.dim == 12

      fq12.coef
      |> Enum.zip(coef)
      |> Enum.each(fn {coef, expected_coef} ->
        coef.value == expected_coef
      end)
    end
  end

  describe "add/2" do
    test "adds two elements" do
      fq2_1 = FQ12.new([75, 898, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20])
      fq2_2 = FQ12.new([981, 121, 1, 2, 3, 4, 5, 6, 7, 8, 9, 50])

      result = FQ12.add(fq2_1, fq2_2)

      fq2_1.coef
      |> Enum.zip(fq2_2.coef)
      |> Enum.zip(result.coef)
      |> Enum.each(fn {{coef1, coef2}, expected_coef} ->
        assert expected_coef.value == coef1.value + coef2.value
      end)
    end
  end

  describe "substact/2" do
    test "substacts two elements" do
      fq2_1 = FQ12.new([75, 898, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20])
      fq2_2 = FQ12.new([981, 121, 1, 2, 3, 4, 5, 6, 7, 8, 9, 50])

      result = FQ12.sub(fq2_1, fq2_2)

      fq2_1.coef
      |> Enum.zip(fq2_2.coef)
      |> Enum.zip(result.coef)
      |> Enum.each(fn {{coef1, coef2}, expected_coef} ->
        assert expected_coef.value == FQ.sub(coef1, coef2).value
      end)
    end
  end

  describe "mult/2" do
    test "multiplies two elements" do
      fq2_1 = FQ12.new([75, 898, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20])
      fq2_2 = FQ12.new([981, 121, 1, 2, 3, 4, 5, 6, 7, 8, 9, 50])

      result = FQ12.mult(fq2_1, fq2_2)

      expected_coef = [
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_221_488_028,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_140_672,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_225_342_333,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_225_245_262,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_224_695_560,
        21_888_242_871_839_275_222_246_405_745_257_275_088_696_311_157_297_823_662_689_037_894_645_226_169_128,
        1_011_716,
        169_739,
        175_215,
        176_125,
        269_010,
        42_921
      ]

      result.coef
      |> Enum.zip(expected_coef)
      |> Enum.each(fn {coef, expected} ->
        coef.value == expected
      end)
    end
  end

  describe "divide/2" do
    test "divides two elements" do
      fq2_1 = FQ12.new([75, 898, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20])
      fq2_2 = FQ12.new([981, 121, 1, 2, 3, 4, 5, 6, 7, 8, 9, 50])

      result = FQ12.divide(fq2_1, fq2_2)

      expected_coef = [
        2_011_881_740_848_420_920_412_253_751_038_762_419_430_102_153_950_850_221_676_466_562_855_973_754_445,
        14_400_486_370_873_772_725_013_789_080_267_577_463_474_983_676_223_443_419_921_924_776_206_449_109_882,
        3_880_172_452_329_649_098_226_867_467_011_399_220_057_958_445_755_754_671_938_611_004_932_934_262_591,
        19_267_038_593_667_322_651_366_954_362_160_470_787_252_885_822_036_059_851_182_156_474_239_910_032_650,
        8_070_019_333_179_895_648_872_912_202_405_855_592_483_534_956_567_238_870_192_387_861_000_658_114_964,
        138_560_801_305_516_396_668_456_098_109_173_790_277_108_206_271_606_001_003_111_242_705_426_330_301,
        16_445_893_878_284_927_596_867_359_394_850_807_920_867_311_194_834_863_906_495_351_152_395_091_436_097,
        7_273_840_868_245_808_549_086_108_720_055_169_460_383_208_083_298_349_344_049_229_629_551_930_514_769,
        13_473_674_523_999_384_748_528_900_303_955_470_136_587_441_314_720_169_383_602_070_545_250_485_703_988,
        258_017_347_001_203_161_848_516_548_147_742_812_565_844_068_859_191_584_520_559_875_454_409_716_147,
        17_652_917_065_625_673_115_435_686_846_464_935_803_096_889_936_457_664_837_470_388_463_098_888_420_037,
        16_667_376_103_103_292_788_101_877_382_733_354_254_284_775_666_180_352_135_985_281_739_652_286_964_120
      ]

      result.coef
      |> Enum.zip(expected_coef)
      |> Enum.each(fn {coef, expected} ->
        coef.value == expected
      end)
    end
  end

  describe "pow/2" do
    test "calculates pow" do
      fq12 = FQ12.new([78_578, 16_935_315, 981, 323_134, 3_456_462, 1, 2, 3, 4, 5, 11, 12])

      result = FQ12.pow(fq12, 19)

      expected_coef = [
        8_840_101_169_779_087_582_674_491_494_374_419_146_510_116_685_920_572_308_835_651_046_426_232_677_452,
        10_042_027_930_515_554_531_665_818_328_966_093_761_114_188_216_806_722_082_069_585_612_612_250_070_108,
        6_025_529_351_052_012_710_236_538_646_073_206_168_380_815_789_296_340_419_621_091_718_890_713_406_224,
        3_513_039_178_211_280_255_388_413_423_823_200_494_952_456_478_251_683_030_740_000_633_242_757_813_705,
        10_898_852_990_727_690_166_049_002_703_535_648_304_346_991_769_757_475_127_957_936_617_412_117_660_256,
        7_498_502_979_416_012_982_838_484_066_967_954_545_978_931_427_098_773_740_232_539_128_779_444_314_555,
        21_451_951_985_252_094_028_813_446_030_653_387_743_570_008_815_386_123_629_799_453_395_296_128_640_695,
        3_968_795_236_540_475_071_355_376_899_443_226_784_999_158_050_244_885_295_837_856_579_561_319_140_934,
        18_572_314_296_584_958_184_149_369_327_434_636_955_775_897_992_611_093_291_987_836_245_126_103_028_311,
        6_895_492_099_243_039_645_070_866_318_233_289_729_475_380_339_356_975_299_775_917_828_910_489_358_501,
        6_393_623_487_386_613_266_195_172_175_788_162_068_007_676_164_184_456_119_601_853_695_918_768_212_541,
        16_883_752_234_240_534_363_843_987_352_760_341_172_278_213_230_623_594_473_673_781_654_831_430_194_971
      ]

      result.coef
      |> Enum.zip(expected_coef)
      |> Enum.each(fn {coef, expected} ->
        coef.value == expected
      end)
    end
  end
end
